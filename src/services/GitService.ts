import { includes } from "@banjoanton/utils";
import fs from "node:fs/promises";
import { GIT_HOOKS } from "../constants";
import { isDevelopment } from "../runtime";
import { GitHook } from "../types";
import { FeatureService } from "./FeatureService";
import { LogService } from "./LogService";

const isGitHook = (hook: string | undefined): hook is GitHook => {
    return includes(GIT_HOOKS, hook);
};

const hookExists = async (hook: GitHook) => {
    try {
        await fs.access(`.git/hooks/${hook}`);
        return true;
    } catch {
        return false;
    }
};

const template = (hook: GitHook) => `#!/bin/sh
# This file was automatically generated by hoks
# Do not edit this file manually

${isDevelopment() ? "nr start" : "hoks"} --type ${hook} "$@"`;

const init = async () => {
    LogService.debug("Initializing hoks");
    const features = FeatureService.getAllFeatures();
    LogService.debug(`Found ${features.length} features`);
    const hooks = features.flatMap(feature => feature.hooks);
    LogService.debug(`Found ${hooks.length} hooks`);

    for (const hook of hooks) {
        LogService.debug(`Checking if hook ${hook} is a valid git hook`);
        if (!isGitHook(hook)) {
            LogService.error(`Hook ${hook} is not a valid git hook`);
            continue;
        }

        fs.writeFile(`.git/hooks/${hook}`, template(hook));

        const exists = await hookExists(hook);
        LogService.debug(`Successfully ${exists ? "updated" : "created"} ${hook}`);

        await fs.chmod(`.git/hooks/${hook}`, 0o755);
    }
};

export const GitService = {
    hookExists,
    isGitHook,
    init,
};
